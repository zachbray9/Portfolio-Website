@{
    ViewData["Title"] = "Project Cybernetica";
}

<div class="text-center">
    <div class="page-container">
        <div class="page-info-container">
            <div class="game-title-container">
                <h1>Project Cybernetica</h1>
            </div>

            <div class="game-about-section">
                <div class="game-about-properties-grid">
                    <div class="game-about-section-column">
                        <div class="game-role-section">
                            <h4>Role</h4>
                            <p>Programmer</p>
                        </div>
                        <div class="game-year-section">
                            <h4>Year</h4>
                            <p>2022</p>
                        </div>
                    </div>
                    <div class="game-about-section-column">
                        <div class="game-genre-section">
                            <h4>Genre</h4>
                            <p>First Person Shooter</p>
                        </div>
                        <div class="game-platform-section">
                            <h4>Platform</h4>
                            <p>PC</p>
                        </div>
                    </div>
                </div>
                <div class="game-about-section-column">
                    <div class="game-description-section">
                        <h4>Description</h4>
                        <p>
                            Project Cybernetica is a 3D first person shooter created in Unreal Engine 5 in which you are a mercenary in an apocalyptic city called Sariya, 
                            a weapons development city. The city suddenly fell off the grid and lost contact with its people. Your goal is to infiltrate the city and 
                            discover what secrets lie within. The project was created with a small development team for my UCF Game Workshop class.
                        </p>
                    </div>
                </div>
            </div>

            <div class="game-video-section">
                <div class="project-video-container">
                    <iframe width="560" height="315" src="https://www.youtube.com/embed/pyLSuHHFSkg?si=cx-3gtcWAqjg5Oms" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
                </div>
            </div>

            <div class="game-contributions-section">
                <h2>My Contributions</h2>

                <div class="game-contributions-details-section">
                    <h4>Automated Performance Testing</h4>
                    <div class="game-contributions-details-section-container">
                        <div class="game-mechanics-paragraph-container">
                            <p> 
                                To assure that the game performed well even as things were constantly being added, I created an automated 
                                performance testing blueprint. In each level, I created a performance sublevel and placed several cameras 
                                along the player path. I then wrote a blueprint that automatically iterates through every camera, takes 
                                a screenshot of the camera's view, and does a CPU/GPU trace for 2 seconds. This generates a .utrace file for each 
                                screenshot which can be taken into Unreal Insights, Unreal's built in profiler, to see specifically how long it takes 
                                to render each frame and what is causing spikes in performance.<br><br>

                                This was efficient for optimization because I compared and benchmarked the same spots in each level as 
                                things were added so there was no inconsistency in what was being rendered. It also allowed me to quickly figure out 
                                why there was a sudden drop in framerate after a new asset was added or lighting was changed because I could see specifically 
                                what changed in each performance camera and use the profiler to figure out what the cause of the problem was. 
                                This automated performance testing greatly streamlined the optimization process of Project Cybernetica and allowed us to 
                                quickly get on top of any issues that arose.
                            </p>
                        </div>

                        <div class="game-mechanics-images-container">
                            <img class="game-mechanics-image" src="/Assets/Images/ProjectCybernetica/PerformanceTestGif.gif" title="Performance Test Gif" />
                            <img class="game-mechanics-image" src="/Assets/Images/ProjectCybernetica/Unreal Insights Screenshot.PNG" title="Unreal Insights" height="340" width="600"/>
                        </div>
                    </div>

                    <h4>Gameplay Mechanics</h4>
                    <div class="game-contributions-details-section-container">
                        <div class="game-mechanics-paragraph-container">
                            <p>
                                The first puzzle in level
                                one consists of a power core behind a glass wall which has a laser field. You have to use the gravity gun to navigate
                                the power core through the lasers and then use the gravity switch to get it out from behind the wall. Touching the
                                lasers sends the power core back to the start of the maze.<br><br>

                                The second puzzle in level one has a generator that needs to be powered using the power
                                core that you got from the first puzzle, as well as several other smaller power cores that need to be color
                                coordinated in the correct slots in the generator. Only upon putting every power core in their correct slots does
                                the door to the next level open. I created this puzzle using trigger volumes in the slots that had boolean values
                                indicating if the correct power core was placed there. When a gameobject touches the trigger volume, it checks the
                                tag of the gameobject to see if it is a power core, and if so, then checks to see if the color on that instance of
                                the power core script is correct.  <br><br>

                                The third puzzle that I created was essentially a shooting range in level two that
                                utilizes the launching feature of the gravity gun. There are targets that the player needs to
                                hit with special objects in order to open the door to the next area. The objects stick to the targets upon
                                collision to indicate which targets have already been hit, and this was done by using a FixedJoint to attach
                                the two objects on contact. Only upon hitting all of the targets does the door open, and I determined if the
                                conditions were met by using a series of booleans and checking if all the targets were hit each time a new target
                                was hit.
                            </p>
                        </div>

                        <div class="game-mechanics-images-container">
                            <img class="game-mechanics-image" src="/Assets/Images/GravityOfSilenceImages/LaserPuzzleGif.gif" title="Laser Puzzle Gif" />
                            <img class="game-mechanics-image" src="/Assets/Images/GravityOfSilenceImages/PowerCorePuzzleGif.gif" title="Power Core Puzzle Gif" />
                            <img class="game-mechanics-image" src="/Assets/Images/GravityOfSilenceImages/ShootingRangePuzzleGif.gif" title="Shooting Range Puzzle Gif" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

